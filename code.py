# -*- coding: utf-8 -*-
"""idmp1 (3) (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v5Q9U8ze9iOgstGhBZaWq_TtUqVPw6XO
"""

from google.colab import files

uploaded = files.upload()

"""# New Section"""

import pandas as pd
df=pd.read_csv('AEP_hourly.csv')

df.head()
df.size

df.describe()

df.isnull().any()

df['Datetime'] = df.Datetime.astype('Datetime64')
print(df.dtypes)
df.head()

df['Datetime']= pd.to_datetime(df['Datetime'])

df['Year'] = pd.DatetimeIndex(df['Datetime']).year

df['Month'] = pd.DatetimeIndex(df['Datetime']).month

df['Day'] = pd.DatetimeIndex(df['Datetime']).day

df['Time'] = pd.DatetimeIndex(df['Datetime']).time

df['Quarter']=pd.DatetimeIndex(df['Datetime']).quarter

df['Weekday']=pd.DatetimeIndex(df['Datetime']).weekday


df.head()

season_list = []
for quarter in df['Quarter']:
    if(quarter == 1):
      season_list.append("Winter")
    if(quarter == 2):
      season_list.append("Spring")
    if(quarter == 3):
      season_list.append("Summer")
    if(quarter == 4):
      season_list.append("Fall")
df['Season'] = season_list

df.head()
df.size

Isweekday =[]
for day in df['Weekday']:
  if(day==5 or day==6):
    Isweekday.append("false")
  else:
    Isweekday.append("true")
df['Isweekday'] = Isweekday

df[df['Isweekday']== "false"]

df= df.drop(columns=['Weekday'])
df.head()

df.size

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
ax=sns.lineplot(x='Year',y='AEP_MW',hue='Season',data=df)
plt.figure(figsize=(20,20))
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
ax=sns.lineplot(x='Year',y='AEP_MW',hue='Isweekday',data=df)
plt.figure(figsize=(20,20))
plt.show()

ax=sns.lineplot(x='Year',y='AEP_MW',data=df)
plt.show()

Xdf = pd.read_csv('AEP_hourly.csv', index_col='Datetime', parse_dates=['Datetime'])
df.head()

import pandas as pd
import datetime as dt
import seaborn as sns
from keras.layers import Dense,Dropout,SimpleRNN,LSTM
from keras.models import Sequential
import keras
import tensorflow as tf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import sklearn.preprocessing

def normalize_data(df):
    scaler = sklearn.preprocessing.MinMaxScaler()
    df['AEP_MW']=scaler.fit_transform(df['AEP_MW'].values.reshape(-1,1))
    return df

df_norm = normalize_data(df)
df_norm.shape

def load_data(stock, seq_len):
    X_train = []
    y_train = []
    for i in range(seq_len, len(stock)):
        X_train.append(stock.iloc[i-seq_len : i, 0])
        y_train.append(stock.iloc[i, 0])

    #1 last 6189 days are going to be used in test
    X_test = X_train[110000:]
    y_test = y_train[110000:]

    #2 first 110000 days are going to be used in training
    X_train = X_train[:110000]
    y_train = y_train[:110000]

    #3 convert to numpy array
    X_train = np.array(X_train)
    y_train = np.array(y_train)

    X_test = np.array(X_test)
    y_test = np.array(y_test)

    #4 reshape data to input into RNN models
    X_train = np.reshape(X_train, (110000, seq_len, 1))

    X_test = np.reshape(X_test, (X_test.shape[0], seq_len, 1))

    return [X_train, y_train, X_test, y_test]

seq_len = 20 #choose sequence length

X_train, y_train, X_test, y_test = load_data(df, seq_len)

print('X_train.shape = ',X_train.shape)
print('y_train.shape = ', y_train.shape)
print('X_test.shape = ', X_test.shape)
print('y_test.shape = ',y_test.shape)

rnn_model = Sequential()

rnn_model.add(SimpleRNN(40,activation="tanh",return_sequences=True, input_shape=(X_train.shape[1],1)))
rnn_model.add(Dropout(0.15))

rnn_model.add(SimpleRNN(40,activation="tanh",return_sequences=True))
rnn_model.add(Dropout(0.15))

rnn_model.add(SimpleRNN(40,activation="tanh",return_sequences=False))
rnn_model.add(Dropout(0.15))

rnn_model.add(Dense(1))

rnn_model.summary()

rnn_model.compile(optimizer="adam",loss="MSE")
rnn = rnn_model.fit(X_train, y_train, epochs=5,validation_split=0.3, batch_size=1000)

rnn_predictions = rnn_model.predict(X_test)

rnn_score = r2_score(y_test,rnn_predictions)
print("R2 Score of RNN model = ",rnn_score)

def plot_predictions(test, predicted, title):
    plt.figure(figsize=(16,4))
    plt.plot(test, color='blue',label='Actual power consumption data')
    plt.plot(predicted, alpha=0.7, color='orange',label='Predicted power consumption data')
    plt.title(title)
    plt.xlabel('Time')
    plt.ylabel('Normalized power consumption scale')
    plt.legend()
    plt.show()

plot_predictions(y_test, rnn_predictions, "Predictions made by simple RNN model")

lstm_model = Sequential()

lstm_model.add(LSTM(40,activation="tanh",return_sequences=True, input_shape=(X_train.shape[1],1)))
lstm_model.add(Dropout(0.15))

lstm_model.add(LSTM(40,activation="tanh",return_sequences=True))
lstm_model.add(Dropout(0.15))

lstm_model.add(LSTM(40,activation="tanh",return_sequences=False))
lstm_model.add(Dropout(0.15))

lstm_model.add(Dense(1))

lstm_model.summary()

lstm_model.compile(optimizer="adam",loss="MSE")
lstm=lstm_model.fit(X_train, y_train, epochs=5,validation_split=0.3, batch_size=1000)

lstm_predictions = lstm_model.predict(X_test)

lstm_score = r2_score(y_test, lstm_predictions)
print("R^2 Score of LSTM model = ",lstm_score)

plot_predictions(y_test, lstm_predictions, "Predictions made by LSTM model")

plt.figure(figsize=(15,8))

plt.plot(y_test, c="orange", linewidth=3, label="Original values")
plt.plot(lstm_predictions, c="red", linewidth=3, label="LSTM predictions")
plt.plot(rnn_predictions, alpha=0.5, c="green", linewidth=3, label="RNN predictions")
plt.legend()
plt.title("Predictions vs actual data", fontsize=20)
plt.show()

from sklearn.metrics import mean_squared_error, mean_absolute_error

print(mean_squared_error(y_test, lstm_predictions))  # MSE

print(mean_squared_error(y_test, lstm_predictions, squared=False) ) #rmse

print(mean_absolute_error(y_test, lstm_predictions)) # MAE

print(mean_squared_error(y_test, rnn_predictions))  # MSE

print(mean_squared_error(y_test, rnn_predictions, squared=False) ) #rmse

print(mean_absolute_error(y_test, rnn_predictions)) # MAE

import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize=(14,6))
ax.plot(lstm.history['loss'], 'b' ,label = 'train loss', linewidth=2)
ax.plot(lstm.history['val_loss'], 'r', label ='Validation loss', linewidth=2)
ax.set_title('model loss')
ax.set_ylabel('mse')
ax.set_xlabel('epoch')
ax.legend()
plt.show()

import matplotlib.pyplot as plt

fig, ax = plt.subplots(figsize=(14,6))
ax.plot(rnn.history['loss'], 'b' ,label = 'train loss', linewidth=2)
ax.plot(rnn.history['val_loss'], 'r', label ='Validation loss', linewidth=2)
ax.set_title('model loss')
ax.set_ylabel('mse')
ax.set_xlabel('epoch')
ax.legend()
plt.show()
